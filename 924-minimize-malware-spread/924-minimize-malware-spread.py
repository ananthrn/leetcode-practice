from collections import OrderedDict
class Solution:
    def bfs(self, src, graph: List[List[int]], initialSet: Set[int], seen: Set[int]) -> List[int]:
        n = len(graph)
        Q = deque()
        # seen = set()
        
        Q.appendleft(src)
        seen.add(src)
        
        # assert src not in initialSet
        
        setMal = set()
        compNum = 1
        
        while len(Q)>0:
            tp = Q.pop()
            
            for j in range(n):
                if graph[tp][j] == 1:
                    if j in initialSet:
                        setMal.add(j)
                    if j not in seen:
                        compNum += 1
                        seen.add(j)
                        Q.appendleft(j)
                    
        
        
        return list(setMal), compNum
        
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        seen = set()
        initialSet = set(initial)
        
        malNum = OrderedDict([(node, 0) for node in sorted(initial)])
        n = len(graph)
        
        for src in range(n):
            if src not in seen:
                listMal, compNum = self.bfs(src, graph, initialSet, seen)
                if len(listMal) == 1:
                    malNum[listMal[0]] += compNum
        
        print("malnNum: ", malNum)
        bestNode = max(malNum, key=malNum.get)
        
        return bestNode
        